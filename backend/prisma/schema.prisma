// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {  
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription? // Um usuário tem uma assinatura

  @@map("users")
}

model Plan {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  serviceType  ServiceType
  cutsPerMonth Int
  price        Float
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate       DateTime @default(now())
  nextBillingDate DateTime
  status          SubscriptionStatus @default(ACTIVE)
  
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique @db.ObjectId // Cada usuário só pode ter uma assinatura

  plan    Plan   @relation(fields: [planId], references: [id])
  planId  String @db.ObjectId

  serviceUsages ServiceUsage[]

  @@map("subscriptions")
}

model ServiceUsage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  usageDate      DateTime @default(now())
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String @db.ObjectId

  @@map("service_usages")
}

enum ServiceType {
  ONLY_CUT
  CUT_AND_BEARD
  FULL_SERVICE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
}
